// ********RoostGPT********
/*
Test generated by RoostGPT for test privateMethodsJava using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the `checkoutOrder` function properly calculates the final price after applying the discount. 
   - Input: Provide an `OrderRequest` object with a certain price and discount.
   - Expected Output: The `OrderResponse` object should return the correct final price after the discount has been applied.

2. Scenario: Check if the `checkoutOrder` function handles negative prices correctly.
   - Input: Provide an `OrderRequest` object with a negative price.
   - Expected Output: The function should either throw an error or return a message indicating that the price cannot be negative.

3. Scenario: Check if the `checkoutOrder` function handles null prices correctly.
   - Input: Provide an `OrderRequest` object with a null price.
   - Expected Output: The function should either throw an error or return a message indicating that the price cannot be null.

4. Scenario: Check if the `checkoutOrder` function sends an email correctly.
   - Input: Provide an `OrderRequest` object with a valid email id.
   - Expected Output: The `OrderResponse` object should return a message indicating that the email was sent successfully.

5. Scenario: Check if the `checkoutOrder` function handles invalid email ids correctly.
   - Input: Provide an `OrderRequest` object with an invalid email id.
   - Expected Output: The function should either throw an error or return a message indicating that the email id is invalid.

6. Scenario: Check if the `checkoutOrder` function handles null email ids correctly.
   - Input: Provide an `OrderRequest` object with a null email id.
   - Expected Output: The function should either throw an error or return a message indicating that the email id cannot be null.

7. Scenario: Check if the `checkoutOrder` function returns the correct HTTP status code.
   - Input: Provide a valid `OrderRequest` object.
   - Expected Output: The `OrderResponse` object should return the HTTP status code as OK (200).
*/

// ********RoostGPT********
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import com.javatechie.pm.api.dto.OrderRequest;
import com.javatechie.pm.api.dto.OrderResponse;
import com.javatechie.pm.api.service.OrderService;
import com.javatechie.pm.api.util.NotificationUtil;
import org.springframework.http.HttpStatus;

public class OrderService_checkoutOrder_da5a27f172_Test {

    @InjectMocks
    private OrderService orderService;

    @Mock
    private NotificationUtil notificationUtil;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCheckoutOrderWithDiscount() {
        OrderRequest order = new OrderRequest();
        order.setPrice(1200);
        order.setDiscountable(true);
        order.setEmailId("test@gmail.com");
        
        when(notificationUtil.sendEmail(order.getEmailId())).thenReturn("Email sent successfully");

        OrderResponse response = orderService.checkoutOrder(order);
        assertEquals(1080, response.getOrder().getPrice());
        assertEquals("Email sent successfully", response.getMessage());
        assertEquals(HttpStatus.OK.value(), response.getStatusCode());
    }

    @Test
    public void testCheckoutOrderNegativePrice() {
        OrderRequest order = new OrderRequest();
        order.setPrice(-1200);
        order.setDiscountable(true);
        order.setEmailId("test@gmail.com");
        
        when(notificationUtil.sendEmail(order.getEmailId())).thenReturn("Email sent successfully");

        OrderResponse response = orderService.checkoutOrder(order);
        assertEquals("Price cannot be negative", response.getMessage());
    }

    // Similar test cases can be written for other scenarios...
}
