// ********RoostGPT********
/*
Test generated by RoostGPT for test privateMethodsJava using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Valid Order Request
- Description: Test the checkoutOrder function with a valid OrderRequest. The function should calculate the discount, subtract it from the price, send an email to the provided email address, and return an OrderResponse with the updated order, a success message, and a HTTP status of 200 (OK).

Test Scenario 2: Invalid Email Address
- Description: Test the checkoutOrder function with an OrderRequest that contains an invalid email address. The function should attempt to send an email, fail, and possibly return an error message along with the OrderResponse.

Test Scenario 3: Negative Order Price
- Description: Test the checkoutOrder function with an OrderRequest that has a negative price. Given that price should not be negative, the function's behavior might be unpredictable and needs to be tested.

Test Scenario 4: High Discount
- Description: Test the checkoutOrder function with an OrderRequest that results in a very high discount. The function should correctly subtract the discount from the price, even if the result is negative.

Test Scenario 5: Null Order Request
- Description: Test the checkoutOrder function with a null OrderRequest. The function should handle this case gracefully, likely returning an error message and an appropriate HTTP status code.

Test Scenario 6: No Discount
- Description: Test the checkoutOrder function with an OrderRequest that does not qualify for a discount. The function should correctly calculate the discount as zero, leaving the price unchanged.

Test Scenario 7: Email Sending Failure
- Description: Test the checkoutOrder function in a scenario where the email sending function fails (due to network issues, for example). The function should handle this failure gracefully, likely returning an error message and an appropriate HTTP status code.

Test Scenario 8: Order Request with Missing Fields
- Description: Test the checkoutOrder function with an OrderRequest that is missing some fields. The function should handle this case gracefully, likely returning an error message and an appropriate HTTP status code.
*/

// ********RoostGPT********
package com.javatechie.pm.api.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import com.javatechie.pm.api.dto.OrderRequest;
import com.javatechie.pm.api.dto.OrderResponse;

public class OrderService_checkoutOrder_da5a27f172_Test {

    @Mock
    private NotificationUtil notificationUtil;

    private OrderService orderService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        orderService = new OrderService();
    }

    @Test
    public void testCheckoutOrder_ValidOrder() {
        OrderRequest order = new OrderRequest();
        order.setPrice(1000);
        order.setDiscountable(true);
        order.setEmailId("test@gmail.com");

        when(notificationUtil.sendEmail(order.getEmailId())).thenReturn("Email sent successfully");

        OrderResponse response = orderService.checkoutOrder(order);

        assertEquals(HttpStatus.OK.value(), response.getStatusCode());
        assertEquals(900, response.getOrder().getPrice());
    }

    @Test
    public void testCheckoutOrder_InvalidEmail() {
        OrderRequest order = new OrderRequest();
        order.setPrice(500);
        order.setDiscountable(true);
        order.setEmailId("invalid email");

        when(notificationUtil.sendEmail(order.getEmailId())).thenReturn("Failed to send email");

        OrderResponse response = orderService.checkoutOrder(order);

        assertEquals(HttpStatus.OK.value(), response.getStatusCode());
        assertEquals("Failed to send email", response.getMessage());
    }

    @Test
    public void testCheckoutOrder_NegativePrice() {
        OrderRequest order = new OrderRequest();
        order.setPrice(-1000);
        order.setDiscountable(true);
        order.setEmailId("test@gmail.com");

        OrderResponse response = orderService.checkoutOrder(order);

        assertEquals(HttpStatus.OK.value(), response.getStatusCode());
        assertEquals(-1000, response.getOrder().getPrice());
    }

    @Test
    public void testCheckoutOrder_HighDiscount() {
        OrderRequest order = new OrderRequest();
        order.setPrice(10000);
        order.setDiscountable(true);
        order.setEmailId("test@gmail.com");

        OrderResponse response = orderService.checkoutOrder(order);

        assertEquals(HttpStatus.OK.value(), response.getStatusCode());
        assertEquals(9000, response.getOrder().getPrice());
    }

    @Test
    public void testCheckoutOrder_NullOrder() {
        OrderResponse response = orderService.checkoutOrder(null);

        assertEquals(HttpStatus.BAD_REQUEST.value(), response.getStatusCode());
        assertEquals("Order cannot be null", response.getMessage());
    }

    @Test
    public void testCheckoutOrder_NoDiscount() {
        OrderRequest order = new OrderRequest();
        order.setPrice(500);
        order.setDiscountable(false);
        order.setEmailId("test@gmail.com");

        OrderResponse response = orderService.checkoutOrder(order);

        assertEquals(HttpStatus.OK.value(), response.getStatusCode());
        assertEquals(500, response.getOrder().getPrice());
    }

    @Test
    public void testCheckoutOrder_EmailSendingFailure() {
        OrderRequest order = new OrderRequest();
        order.setPrice(500);
        order.setDiscountable(true);
        order.setEmailId("test@gmail.com");

        when(notificationUtil.sendEmail(order.getEmailId())).thenThrow(new RuntimeException());

        OrderResponse response = orderService.checkoutOrder(order);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR.value(), response.getStatusCode());
        assertEquals("Failed to send email", response.getMessage());
    }

    @Test
    public void testCheckoutOrder_MissingFields() {
        OrderRequest order = new OrderRequest();

        OrderResponse response = orderService.checkoutOrder(order);

        assertEquals(HttpStatus.BAD_REQUEST.value(), response.getStatusCode());
        assertEquals("Missing required fields", response.getMessage());
    }
}
