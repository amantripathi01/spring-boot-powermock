// ********RoostGPT********
/*
Test generated by RoostGPT for test privateMethodsJava using AI Type Open AI and AI Model gpt-4

Test Scenario 1: 
- Description: Verify if the order is correctly processed when a valid OrderRequest is passed.
- Steps: Pass a valid OrderRequest object to the function.
- Expected Result: The function should return an OrderResponse object with a success message and a HTTP status of OK (200).

Test Scenario 2: 
- Description: Verify if the discount is correctly applied to the order.
- Steps: Pass an OrderRequest object with a valid discount to the function.
- Expected Result: The function should return an OrderResponse object with the correct discounted price.

Test Scenario 3: 
- Description: Verify if the correct email is used for notifications.
- Steps: Pass an OrderRequest object with a specific email ID.
- Expected Result: The function should send a notification to the correct email ID.

Test Scenario 4: 
- Description: Verify if the function handles invalid OrderRequests.
- Steps: Pass an invalid OrderRequest object to the function.
- Expected Result: The function should return an appropriate error message and a HTTP status of Bad Request (400).

Test Scenario 5:
- Description: Verify if the function handles null OrderRequests.
- Steps: Pass a null OrderRequest object to the function.
- Expected Result: The function should return an appropriate error message and a HTTP status of Bad Request (400).

Test Scenario 6: 
- Description: Verify if the function handles OrderRequests with invalid email IDs.
- Steps: Pass an OrderRequest object with an invalid email ID.
- Expected Result: The function should return an appropriate error message and a HTTP status of Bad Request (400).

Test Scenario 7: 
- Description: Verify the function when the email notification service fails.
- Steps: Simulate a failure in the email notification service and pass a valid OrderRequest object to the function.
- Expected Result: The function should handle the error gracefully and return an appropriate error message and HTTP status.
*/

// ********RoostGPT********
package com.javatechie.pm.api.service;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;
import com.javatechie.pm.api.dto.OrderRequest;
import com.javatechie.pm.api.dto.OrderResponse;
import com.javatechie.pm.api.util.NotificationUtil;

@RunWith(MockitoJUnitRunner.class)
public class OrderService_checkoutOrder_da5a27f172_Test {

    @InjectMocks
    OrderService orderService;

    @Mock
    NotificationUtil notificationUtil;

    @Test
    public void testCheckoutOrder_ValidOrder() {
        OrderRequest order = new OrderRequest();
        order.setPrice(1000);
        order.setEmailId("test@gmail.com");
        when(notificationUtil.sendEmail(order.getEmailId())).thenReturn("Email sent successfully");
        OrderResponse response = orderService.checkoutOrder(order);
        assertEquals("Email sent successfully", response.getMessage());
        assertEquals(HttpStatus.OK.value(), response.getStatus());
    }

    @Test
    public void testCheckoutOrder_ValidOrderWithDiscount() {
        OrderRequest order = new OrderRequest();
        order.setPrice(1100);
        order.setDiscountable(true);
        order.setEmailId("test@gmail.com");
        when(notificationUtil.sendEmail(order.getEmailId())).thenReturn("Email sent successfully");
        OrderResponse response = orderService.checkoutOrder(order);
        assertEquals("Email sent successfully", response.getMessage());
        assertEquals(HttpStatus.OK.value(), response.getStatus());
        assertEquals(990, response.getOrder().getPrice());
    }

    @Test
    public void testCheckoutOrder_InvalidOrder() {
        OrderRequest order = new OrderRequest();
        order.setPrice(-1000);
        order.setEmailId("test@gmail.com");
        OrderResponse response = orderService.checkoutOrder(order);
        assertEquals("Invalid order", response.getMessage());
        assertEquals(HttpStatus.BAD_REQUEST.value(), response.getStatus());
    }

    @Test
    public void testCheckoutOrder_NullOrder() {
        OrderRequest order = null;
        OrderResponse response = orderService.checkoutOrder(order);
        assertEquals("Invalid order", response.getMessage());
        assertEquals(HttpStatus.BAD_REQUEST.value(), response.getStatus());
    }

    @Test
    public void testCheckoutOrder_InvalidEmail() {
        OrderRequest order = new OrderRequest();
        order.setPrice(1000);
        order.setEmailId("invalid email");
        OrderResponse response = orderService.checkoutOrder(order);
        assertEquals("Invalid email", response.getMessage());
        assertEquals(HttpStatus.BAD_REQUEST.value(), response.getStatus());
    }

    @Test
    public void testCheckoutOrder_EmailNotificationFailure() {
        OrderRequest order = new OrderRequest();
        order.setPrice(1000);
        order.setEmailId("test@gmail.com");
        when(notificationUtil.sendEmail(order.getEmailId())).thenThrow(new RuntimeException("Email service failure"));
        OrderResponse response = orderService.checkoutOrder(order);
        assertEquals("Email service failure", response.getMessage());
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR.value(), response.getStatus());
    }
}
