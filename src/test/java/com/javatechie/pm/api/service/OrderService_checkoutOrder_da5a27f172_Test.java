// ********RoostGPT********
/*
Test generated by RoostGPT for test privateMethodsJava using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the `checkoutOrder` function properly calculates the final price after applying the discount. 
   - Input: Provide an `OrderRequest` object with a certain price and discount.
   - Expected Output: The `OrderResponse` object should return the correct final price after the discount is applied.

2. Scenario: Check if the `checkoutOrder` function sends an email notification successfully.
   - Input: Provide an `OrderRequest` object with a valid email id.
   - Expected Output: The `OrderResponse` object should return a message indicating that the email was sent successfully.

3. Scenario: Check if the `checkoutOrder` function handles invalid email id properly.
   - Input: Provide an `OrderRequest` object with an invalid email id.
   - Expected Output: The `OrderResponse` object should return a message indicating that the email was not sent.

4. Scenario: Check if the `checkoutOrder` function returns the correct HTTP status code.
   - Input: Provide an `OrderRequest` object.
   - Expected Output: The `OrderResponse` object should return an HTTP status code indicating the request was processed successfully (HttpStatus.OK).

5. Scenario: Check if the `checkoutOrder` function handles null `OrderRequest` properly.
   - Input: Provide a null `OrderRequest` object.
   - Expected Output: The function should handle the null object properly, possibly throwing an exception or returning an appropriate error message.

6. Scenario: Check if the `checkoutOrder` function handles an `OrderRequest` with negative price properly.
   - Input: Provide an `OrderRequest` object with a negative price.
   - Expected Output: The function should handle this case appropriately, possibly throwing an exception or returning an appropriate error message.

7. Scenario: Check if the `checkoutOrder` function handles an `OrderRequest` with zero price properly.
   - Input: Provide an `OrderRequest` object with a zero price.
   - Expected Output: The function should handle this case appropriately, possibly throwing an exception or returning an appropriate error message.
*/

// ********RoostGPT********
package com.javatechie.pm.api.service;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import com.javatechie.pm.api.dto.OrderRequest;
import com.javatechie.pm.api.dto.OrderResponse;
import org.springframework.http.HttpStatus;

public class OrderService_checkoutOrder_da5a27f172_Test {

    @Test
    public void testCheckoutOrderWithDiscount() {
        OrderService orderService = new OrderService();
        OrderRequest order = new OrderRequest();
        order.setPrice(1000);
        order.setDiscountable(true);
        OrderResponse response = orderService.checkoutOrder(order);
        assertEquals(900, response.getOrder().getPrice());
    }

    @Test
    public void testCheckoutOrderWithValidEmail() {
        OrderService orderService = new OrderService();
        OrderRequest order = new OrderRequest();
        order.setEmailId("test@example.com");
        OrderResponse response = orderService.checkoutOrder(order);
        assertEquals("Email sent successfully", response.getMessage());
    }

    @Test
    public void testCheckoutOrderWithInvalidEmail() {
        OrderService orderService = new OrderService();
        OrderRequest order = new OrderRequest();
        order.setEmailId("invalid email");
        OrderResponse response = orderService.checkoutOrder(order);
        assertEquals("Email not sent", response.getMessage());
    }

    @Test
    public void testCheckoutOrderHttpStatus() {
        OrderService orderService = new OrderService();
        OrderRequest order = new OrderRequest();
        OrderResponse response = orderService.checkoutOrder(order);
        assertEquals(HttpStatus.OK.value(), response.getStatusCode());
    }

    @Test
    public void testCheckoutOrderWithNullOrder() {
        OrderService orderService = new OrderService();
        assertThrows(NullPointerException.class, () -> orderService.checkoutOrder(null));
    }

    @Test
    public void testCheckoutOrderWithNegativePrice() {
        OrderService orderService = new OrderService();
        OrderRequest order = new OrderRequest();
        order.setPrice(-100);
        assertThrows(IllegalArgumentException.class, () -> orderService.checkoutOrder(order));
    }

    @Test
    public void testCheckoutOrderWithZeroPrice() {
        OrderService orderService = new OrderService();
        OrderRequest order = new OrderRequest();
        order.setPrice(0);
        assertThrows(IllegalArgumentException.class, () -> orderService.checkoutOrder(order));
    }
}
