// ********RoostGPT********
/*
Test generated by RoostGPT for test privateMethodsJava using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the `checkoutOrder` function properly calculates the final price after applying the discount. 
   - Input: Provide an `OrderRequest` object with a certain price and discount.
   - Expected Output: The `OrderResponse` object should return the price after discount.

2. Scenario: Check if the `checkoutOrder` function sends the notification email correctly.
   - Input: Provide an `OrderRequest` object with a valid email id.
   - Expected Output: The `OrderResponse` object should contain a message indicating that the email was sent successfully.

3. Scenario: Check if the `checkoutOrder` function handles an invalid email id.
   - Input: Provide an `OrderRequest` object with an invalid email id.
   - Expected Output: The `OrderResponse` object should contain a message indicating that the email was not sent successfully.

4. Scenario: Check if the `checkoutOrder` function correctly handles negative price.
   - Input: Provide an `OrderRequest` object with a negative price.
   - Expected Output: The `OrderResponse` object should contain an appropriate message or error code indicating the issue.

5. Scenario: Check if the `checkoutOrder` function correctly handles a zero price.
   - Input: Provide an `OrderRequest` object with a zero price.
   - Expected Output: The `OrderResponse` object should contain an appropriate message or error code indicating the issue.

6. Scenario: Check if the `checkoutOrder` function correctly handles a null `OrderRequest` object.
   - Input: Provide a null `OrderRequest` object.
   - Expected Output: The `OrderResponse` object should contain an appropriate message or error code indicating the issue.

7. Scenario: Check if the `checkoutOrder` function returns the correct HTTP status code.
   - Input: Provide a valid `OrderRequest` object.
   - Expected Output: The `OrderResponse` object should return the HTTP status code as OK (200).

8. Scenario: Check if the `checkoutOrder` function handles the scenario where the discount is greater than the price.
   - Input: Provide an `OrderRequest` object where the discount is greater than the price.
   - Expected Output: The `OrderResponse` object should contain an appropriate message or error code indicating the issue.
*/

// ********RoostGPT********
package com.javatechie.pm.api.service;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class OrderService_checkoutOrder_da5a27f172_Test {

    OrderService orderService = new OrderService();

    @Test
    public void testCheckoutOrder_validDiscount() {
        OrderRequest orderRequest = new OrderRequest();
        orderRequest.setPrice(1200);
        orderRequest.setDiscountable(true);
        OrderResponse orderResponse = orderService.checkoutOrder(orderRequest);
        assertEquals(1080, orderResponse.getOrder().getPrice());
        assertEquals("Email sent successfully", orderResponse.getMessage());
        assertEquals(HttpStatus.OK.value(), orderResponse.getStatus());
    }

    @Test
    public void testCheckoutOrder_sendEmail() {
        OrderRequest orderRequest = new OrderRequest();
        orderRequest.setEmailId("test@mail.com");
        OrderResponse orderResponse = orderService.checkoutOrder(orderRequest);
        assertEquals("Email sent successfully", orderResponse.getMessage());
    }

    @Test
    public void testCheckoutOrder_invalidEmail() {
        OrderRequest orderRequest = new OrderRequest();
        orderRequest.setEmailId("invalidEmail");
        OrderResponse orderResponse = orderService.checkoutOrder(orderRequest);
        assertEquals("Failed to send email", orderResponse.getMessage());
    }

    @Test
    public void testCheckoutOrder_negativePrice() {
        OrderRequest orderRequest = new OrderRequest();
        orderRequest.setPrice(-1000);
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            orderService.checkoutOrder(orderRequest);
        });
        assertEquals("Price cannot be negative", exception.getMessage());
    }

    @Test
    public void testCheckoutOrder_zeroPrice() {
        OrderRequest orderRequest = new OrderRequest();
        orderRequest.setPrice(0);
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            orderService.checkoutOrder(orderRequest);
        });
        assertEquals("Price cannot be zero", exception.getMessage());
    }

    @Test
    public void testCheckoutOrder_nullOrder() {
        Exception exception = assertThrows(NullPointerException.class, () -> {
            orderService.checkoutOrder(null);
        });
        assertEquals("Order cannot be null", exception.getMessage());
    }

    @Test
    public void testCheckoutOrder_correctStatus() {
        OrderRequest orderRequest = new OrderRequest();
        OrderResponse orderResponse = orderService.checkoutOrder(orderRequest);
        assertEquals(HttpStatus.OK.value(), orderResponse.getStatus());
    }

    @Test
    public void testCheckoutOrder_discountGreaterThanPrice() {
        OrderRequest orderRequest = new OrderRequest();
        orderRequest.setPrice(500);
        orderRequest.setDiscountable(true);
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            orderService.checkoutOrder(orderRequest);
        });
        assertEquals("Discount cannot be greater than price", exception.getMessage());
    }
}
